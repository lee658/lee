UCI GUI 메모리 관리, 인스터럭션,

프로그램 - 하드디스크에 저장
프로세스 - 메모리에 적재, 프로그램 실행

작업 스켸줄링 - 작업 순서 관리
접근 통제 취약점 - 파일관리

cpu - 하드웨어(0 1) + gpu

cpu 레지스터 메모리 하드디스크
    <<---속도,가격<<--

메모리 - 스택, 힙, 메모리 주소

리버싱, 어셈블리어 - 레지스터
비트 차이 - 크기 차이

스택 - 푸쉬(데이터 입력), 팝(데이터 추출{데이터 제일 위에 있는 블록})
(퍼스트인 라스트 아웃)

범용 세그먼트 EAx - 누산기 : 산술연산 사용
포인터 레지스터 - 메모리 실행시 프로그램 저장
EBP - 스택내에변수값읽음
ESP - 스택의 가장 끝 주소 가리킴
EIP - 다음의 수행될 명령의 주소 형성

    터미널 명령어
getconf LONG_BIT arch uname -m 유닉스 비트 확인
echo %PROCESSOR_ARCHITECTURE, systeminfo | findstr based - 위도우 비트확인

어셈블리어 - 인텔, AT&T 2가지 방식
차이점 : 연산자 위치 차이
AT&T : dbslrtm 인텔 : 인도우

    16진수값 5를 eax 레지스터로 이동
AT&t : movl $0x05, %EAx - $에서 %
인텔 : movl eax, 5 - 5에서 eax
헤석 순서의 앞뒤 차이

    ebp에서 12더한 값을 eax로 이동
At&t : movl 0x12(%ebp), %eax
인텔 : movl eax, [ebp+12h]

버그{
    취약점{
        익스플로잇
    }
}

버그 : 디버깅
취약점 : 보안(C, I, A(기밀성 무결성 가용성 ))
익스플로잇 : 가능 여부

SW 개발보안 : 설계 - 배포 - 폐기

0day - 취약점 발견후 패치 배포되기 전 단꼐
1day - 바로 적용이 불가능해 적용하는 기간(변종 출현 가능 기간)

CWE CVE CVSS

DoS : 서비스를 정상적으로 운영하지 못하게 하는 공격
Code Execution : 원격 코드 실행으로 불림 UCI을 통해 실행
OverFlow : 메모리의 검사값을 검사하지않아 할당된 메모리 바운더리 벗어나 접근 가능한 취약점
Memory Corruption : 메모리를 참조하는 부분에서 오류 발생하는 침약점
공격자가 원하는 명령어 참조 가능
Gain lnformation : 버전정보, 경로정보 노출
Gain Privileges : 낮은 권한에서 높은권한으로 올라가는 취약점

