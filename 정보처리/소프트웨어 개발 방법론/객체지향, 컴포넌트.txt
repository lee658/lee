    소프트웨어 개발 방법론

    객체지향 방법론 - 1990년대
객체지향 방법론 절차 
요구분석 - 설계 - 구현 - 시험 - 인수

    객체지향 방법론의 특징
-데이터와 그 데이터를 포함하는 방법론
-데이터는 실체, 동작은 절차, 방법, 기능
-정보 시스템과 데이터베이스를 설계하는 방법론
-분석, 설계/개발에 객체지향 기법 활용해 시스템 구축하는 방법론
-객체 중심으로 캡슐화, 추상화 기술 필요
-분석 초점이 명확, 자연스럽고 유연하며 재사용 용이
-개발 전문가 부족

    컴포넌트 기반 방법론 - 2000년대
컴포넌트 기반 방법론의 절차
개발 준비 - 분석 - 설계 - 구현 - 시험 - 전개 - 인도

    컨포넌트 기반 방법론의 특징
-소프트웨어를 구성하는 컴포넌트 조립해 하나의 앱을 작성 하는 방법론
-모듈은 기능을 구현하기 위한 최소의 단위
-공공 행정 정보 시스템의 개발에 많이 활요되는 표준 프로세스
-재사용이 가능한 컴포넌트의 개발, 상용 컨포넌트들을 조합하여 개발하는 방법론
-생산성, 품질을 높이고, 유지보수의 비용 최소화 하는 개발 방법
-반복적, 점진적으로 개벌, 재사용성 생산성, 픔질이 높은 방법
-비용 저렴, 위험 개선
-캄포넌트 유통 환경 개선해야함
-테스트 환경 부족, 컴포넌트 평가, 인증 환경이 미흡

    소프트웨어의 문제점(위기)
-소프트웨어 의 개발 비용이 계속적 증대
-소프트웨어를 개발한 후에 발생하는 유지보수 비용 증대
-소프트웨어의 관리적면 강조됨
-유저의 요구 변화가 많아 개발 기간 연장
-하드웨어는 높지만 소프트웨어가 너무 낮다
-업무의 전문성 증가로인한 유저와 개발자의 의견차이가 크다
-개발된 소프트웨ㅔ어의 기능적 오류가 많아져 성능/신뢰성 부족
-소프트웨어의 품질 평가 기준이 없다
-시장은 넓지만, 소프트웨어의 개발 인력 부족
 